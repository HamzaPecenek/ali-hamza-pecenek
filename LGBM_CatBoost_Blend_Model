{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":116092,"databundleVersionId":13860829,"sourceType":"competition"},{"sourceId":13424641,"sourceType":"datasetVersion","datasetId":8520630}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# ===============================================================\n# üß† CATBOOST MODEL ‚Äî with Time-Aware Target Encoding + Dual ISO Calibration\n# ===============================================================\n\nimport pandas as pd, numpy as np\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.isotonic import IsotonicRegression\nfrom sklearn.metrics import roc_auc_score, log_loss, brier_score_loss\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:12.849311Z","iopub.execute_input":"2025-10-22T16:30:12.849987Z","iopub.status.idle":"2025-10-22T16:30:12.855415Z","shell.execute_reply.started":"2025-10-22T16:30:12.849961Z","shell.execute_reply":"2025-10-22T16:30:12.854298Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üì¶ Load engineered base features\n# ---------------------------------------------------------------\ntrain = pd.read_csv(\"/kaggle/input/feature-engineered-csvs/train_features(1).csv\")\ntest  = pd.read_csv(\"/kaggle/input/feature-engineered-csvs/test_features(1).csv\")\ntrain[\"ref_date\"] = pd.to_datetime(train[\"ref_date\"])\ntest[\"ref_date\"]  = pd.to_datetime(test[\"ref_date\"])\n\nprint(\"‚úÖ Data loaded\")\nprint(f\"Train: {train.shape} | Test: {test.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:15.193064Z","iopub.execute_input":"2025-10-22T16:30:15.193455Z","iopub.status.idle":"2025-10-22T16:30:17.698452Z","shell.execute_reply.started":"2025-10-22T16:30:15.193428Z","shell.execute_reply":"2025-10-22T16:30:17.697257Z"}},"outputs":[{"name":"stdout","text":"‚úÖ Data loaded\nTrain: (133287, 87) | Test: (43006, 86)\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üßÆ Temporal deltas & ratios (3m vs 6m)\n# ---------------------------------------------------------------\ndef add_temporal_deltas(df):\n    bases = {c[:-3] for c in df.columns if c.endswith(\"_3m\") and f\"{c[:-3]}_6m\" in df.columns}\n    for base in bases:\n        c3, c6 = f\"{base}_3m\", f\"{base}_6m\"\n        df[f\"{base}_delta_3m6m\"]  = df[c3] - df[c6]\n        df[f\"{base}_ratio_3m6m\"]  = df[c3] / df[c6].replace(0, np.nan)\n        df[f\"{base}_growth_3m6m\"] = (df[c3] - df[c6]) / df[c6].replace(0, np.nan)\n    return df.replace([np.inf, -np.inf], np.nan)\n\ntrain = add_temporal_deltas(train)\ntest  = add_temporal_deltas(test)\nprint(f\"‚úÖ After deltas: Train {train.shape}, Test {test.shape}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:21.313972Z","iopub.execute_input":"2025-10-22T16:30:21.314415Z","iopub.status.idle":"2025-10-22T16:30:22.047930Z","shell.execute_reply.started":"2025-10-22T16:30:21.314388Z","shell.execute_reply":"2025-10-22T16:30:22.046538Z"}},"outputs":[{"name":"stdout","text":"‚úÖ After deltas: Train (133287, 156), Test (43006, 155)\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# ===============================================================\n# üßÆ Bayesian-Smoothed Cumulative Time-Aware Target Encoding\n# ===============================================================\ndef bayesian_cumulative_target_encoding(\n    train_df, test_df, cat_cols, date_col=\"ref_date\", target=\"churn\", prior_weight=100\n):\n    \"\"\"\n    Leakage-free cumulative target encoding with Bayesian smoothing.\n    Cleaned up to avoid SettingWithCopyWarning.\n    \"\"\"\n    df = train_df.copy()\n    df = df.sort_values(date_col)\n    df[\"month_period\"] = df[date_col].dt.to_period(\"M\")\n    global_mean = df[target].mean()\n\n    encoded_parts = []\n    historical_df = pd.DataFrame()\n    unique_months = sorted(df[\"month_period\"].unique())\n\n    for month in unique_months:\n        current_mask = df[\"month_period\"] == month\n        current = df.loc[current_mask].copy()  # <-- copy() fixes the warning\n\n        if not historical_df.empty:\n            for c in cat_cols:\n                stats = historical_df.groupby(c, observed=True)[target].agg([\"mean\", \"count\"])\n                stats[\"smoothed\"] = (\n                    stats[\"count\"] * stats[\"mean\"] + prior_weight * global_mean\n                ) / (stats[\"count\"] + prior_weight)\n                enc_map = stats[\"smoothed\"].to_dict()\n                current.loc[:, f\"{c}_te\"] = current[c].map(enc_map)  # safe assignment\n        else:\n            for c in cat_cols:\n                current.loc[:, f\"{c}_te\"] = global_mean  # safe assignment\n\n        encoded_parts.append(current)\n        historical_df = pd.concat([historical_df, current], axis=0, ignore_index=True)\n\n    encoded_df = pd.concat(encoded_parts, axis=0, ignore_index=True).drop(columns=[\"month_period\"])\n\n    # Encode test set using full training history with the same smoothing\n    test_encoded = test_df.copy()\n    for c in cat_cols:\n        stats = df.groupby(c, observed=True)[target].agg([\"mean\", \"count\"])\n        stats[\"smoothed\"] = (\n            stats[\"count\"] * stats[\"mean\"] + prior_weight * global_mean\n        ) / (stats[\"count\"] + prior_weight)\n        enc_map = stats[\"smoothed\"].to_dict()\n        test_encoded.loc[:, f\"{c}_te\"] = test_encoded[c].map(enc_map)\n\n    print(f\"‚úÖ Applied Bayesian cumulative encoding for {len(cat_cols)} categorical columns (prior_weight={prior_weight})\")\n    return encoded_df, test_encoded\n\ncat_cols = [\"gender\", \"province\", \"religion\", \"work_type\", \"work_sector\", \"season\"]\ntrain, test = bayesian_cumulative_target_encoding(train, test, cat_cols)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:23.687019Z","iopub.execute_input":"2025-10-22T16:30:23.687337Z","iopub.status.idle":"2025-10-22T16:30:25.643596Z","shell.execute_reply.started":"2025-10-22T16:30:23.687315Z","shell.execute_reply":"2025-10-22T16:30:25.642280Z"}},"outputs":[{"name":"stdout","text":"‚úÖ Applied Bayesian cumulative encoding for 6 categorical columns (prior_weight=100)\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# ‚è≥ Train-validation split (time-based)\n# ---------------------------------------------------------------\ncutoff = \"2018-11-01\"\ntrain_part = train[train[\"ref_date\"] < cutoff].copy()\nvalid_part = train[train[\"ref_date\"] >= cutoff].copy()\n\nX_train = train_part.drop(columns=[\"cust_id\", \"ref_date\", \"churn\"])\ny_train = train_part[\"churn\"]\nX_valid = valid_part.drop(columns=[\"cust_id\", \"ref_date\", \"churn\"])\ny_valid = valid_part[\"churn\"]\nX_test  = test.drop(columns=[\"cust_id\", \"ref_date\"])\n\nprint(f\"üìÖ Train {X_train.shape}, Valid {X_valid.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:29.298925Z","iopub.execute_input":"2025-10-22T16:30:29.299274Z","iopub.status.idle":"2025-10-22T16:30:29.571909Z","shell.execute_reply.started":"2025-10-22T16:30:29.299242Z","shell.execute_reply":"2025-10-22T16:30:29.570780Z"}},"outputs":[{"name":"stdout","text":"üìÖ Train (118422, 159), Valid (14865, 159)\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üßπ Clean up temporary columns\n# ---------------------------------------------------------------\nfor df_ in [X_train, X_valid, X_test]:\n    if \"month_period\" in df_.columns:\n        df_.drop(columns=[\"month_period\"], inplace=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:30.868996Z","iopub.execute_input":"2025-10-22T16:30:30.869320Z","iopub.status.idle":"2025-10-22T16:30:30.875370Z","shell.execute_reply.started":"2025-10-22T16:30:30.869295Z","shell.execute_reply":"2025-10-22T16:30:30.874038Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# ‚öñÔ∏è Class imbalance\n# ---------------------------------------------------------------\nneg, pos = np.bincount(y_train)\nscale_pos_weight = neg / pos\nprint(f\"Class weight ‚âà {scale_pos_weight:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:34.030023Z","iopub.execute_input":"2025-10-22T16:30:34.031249Z","iopub.status.idle":"2025-10-22T16:30:34.037644Z","shell.execute_reply.started":"2025-10-22T16:30:34.031188Z","shell.execute_reply":"2025-10-22T16:30:34.036404Z"}},"outputs":[{"name":"stdout","text":"Class weight ‚âà 6.00\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# ‚öñÔ∏è Class imbalance\n# ---------------------------------------------------------------\nneg, pos = np.bincount(y_train)\nscale_pos_weight = neg / pos\nprint(f\"Class weight ‚âà {scale_pos_weight:.2f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:35.177443Z","iopub.execute_input":"2025-10-22T16:30:35.177852Z","iopub.status.idle":"2025-10-22T16:30:35.186077Z","shell.execute_reply.started":"2025-10-22T16:30:35.177826Z","shell.execute_reply":"2025-10-22T16:30:35.184839Z"}},"outputs":[{"name":"stdout","text":"Class weight ‚âà 6.00\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"# ===============================================================\n# üöÄ CatBoost Model\n# ===============================================================\ntrain_pool = Pool(X_train, y_train, cat_features=[c for c in cat_cols if c in X_train.columns])\nvalid_pool = Pool(X_valid, y_valid, cat_features=[c for c in cat_cols if c in X_valid.columns])\n\ncb = CatBoostClassifier(\n    iterations=3000,\n    learning_rate=0.03,\n    depth=8,\n    l2_leaf_reg=3,\n    random_seed=42,\n    loss_function=\"Logloss\",\n    eval_metric=\"AUC\",\n    class_weights=[1.0, scale_pos_weight],\n    od_type=\"Iter\",\n    od_wait=200,\n    verbose=False\n)\n\nprint(\"\\nüöÄ Training CatBoost...\")\ncb.fit(train_pool, eval_set=valid_pool, use_best_model=True)\ncb_val = cb.predict_proba(X_valid)[:, 1]\n\nprint(f\"‚úÖ Validation AUC: {roc_auc_score(y_valid, cb_val):.5f}\")\nprint(f\"‚úÖ Validation LogLoss: {log_loss(y_valid, cb_val):.5f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:30:39.291768Z","iopub.execute_input":"2025-10-22T16:30:39.292104Z","iopub.status.idle":"2025-10-22T16:32:31.667391Z","shell.execute_reply.started":"2025-10-22T16:30:39.292078Z","shell.execute_reply":"2025-10-22T16:32:31.666406Z"}},"outputs":[{"name":"stdout","text":"\nüöÄ Training CatBoost...\n‚úÖ Validation AUC: 0.71106\n‚úÖ Validation LogLoss: 0.60544\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"# ===============================================================\n# üéØ Isotonic Regression Calibration (Validation)\n# ===============================================================\niso_val = IsotonicRegression(out_of_bounds='clip')\niso_val.fit(cb_val, y_valid)\ncb_val_cal = iso_val.predict(cb_val)\n\nprint(f\"üéØ Calibrated LogLoss: {log_loss(y_valid, cb_val_cal):.5f}\")\nprint(f\"üéØ Calibrated AUC: {roc_auc_score(y_valid, cb_val_cal):.5f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:33:09.128519Z","iopub.execute_input":"2025-10-22T16:33:09.128869Z","iopub.status.idle":"2025-10-22T16:33:09.153376Z","shell.execute_reply.started":"2025-10-22T16:33:09.128844Z","shell.execute_reply":"2025-10-22T16:33:09.151737Z"}},"outputs":[{"name":"stdout","text":"üéØ Calibrated LogLoss: 0.35459\nüéØ Calibrated AUC: 0.71395\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"# ---------------------------------------------------------------\n# üìä Calibration Diagnostic Plots\n# ---------------------------------------------------------------\nfrom sklearn.calibration import calibration_curve\n\nprob_true, prob_pred = calibration_curve(y_valid, cb_val, n_bins=20)\nprob_true_cal, prob_pred_cal = calibration_curve(y_valid, cb_val_cal, n_bins=20)\n\nplt.figure(figsize=(6,5))\nplt.plot(prob_pred, prob_true, \"o-\", label=\"Before ISO\")\nplt.plot(prob_pred_cal, prob_true_cal, \"o-\", label=\"After ISO (Calibrated)\")\nplt.plot([0,1], [0,1], \"--\", color=\"gray\")\nplt.title(\"üß© Reliability Curve (CatBoost)\")\nplt.xlabel(\"Predicted probability\")\nplt.ylabel(\"True probability\")\nplt.legend()\nplt.grid(alpha=0.4)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:33:10.079997Z","iopub.execute_input":"2025-10-22T16:33:10.080296Z","iopub.status.idle":"2025-10-22T16:33:10.336741Z","shell.execute_reply.started":"2025-10-22T16:33:10.080275Z","shell.execute_reply":"2025-10-22T16:33:10.335522Z"}},"outputs":[{"name":"stderr","text":"/tmp/ipykernel_37/4257396645.py:18: UserWarning: Glyph 129513 (\\N{JIGSAW PUZZLE PIECE}) missing from current font.\n  plt.tight_layout()\n/usr/local/lib/python3.11/dist-packages/IPython/core/pylabtools.py:151: UserWarning: Glyph 129513 (\\N{JIGSAW PUZZLE PIECE}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 600x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":24},{"cell_type":"code","source":"# ===============================================================\n# ‚è±Ô∏è Month-wise (Temporal) Isotonic Calibration with Rolling OOF\n# ===============================================================\nfrom sklearn.isotonic import IsotonicRegression\nfrom sklearn.metrics import roc_auc_score, log_loss, brier_score_loss\n\n# --- helper: month key\ndef add_month_key(df, date_col=\"ref_date\"):\n    df = df.copy()\n    df[\"month_key\"] = pd.to_datetime(df[date_col]).dt.to_period(\"M\")\n    return df\n\ntrain_m = add_month_key(train, \"ref_date\")\ntest_m  = add_month_key(test,  \"ref_date\")\n\n# --- features/target again (for safety)\nALL_CAT = [c for c in [\"gender\",\"province\",\"religion\",\"work_type\",\"work_sector\",\"season\"] if c in train.columns]\nFEATS   = [c for c in train.columns if c not in [\"cust_id\",\"ref_date\",\"churn\"]]\n\n# --- collect OOF predictions month-by-month with a rolling split (no leakage)\nunique_months = sorted(train_m[\"month_key\"].unique())\noof_rows, oof_preds = [], []\n\nprint(f\"üß™ Rolling OOF across {len(unique_months)} months...\")\nfor i in range(1, len(unique_months)):  # start from second month so we have history\n    m = unique_months[i]\n    trn_idx = train_m[\"month_key\"] < m\n    val_idx = train_m[\"month_key\"] == m\n\n    X_trn = train_m.loc[trn_idx, FEATS]\n    y_trn = train_m.loc[trn_idx, \"churn\"]\n    X_val = train_m.loc[val_idx, FEATS]\n    y_val = train_m.loc[val_idx, \"churn\"]\n\n    # cat features that exist in this subset\n    cat_in = [c for c in ALL_CAT if c in X_trn.columns]\n\n    pool_trn = Pool(X_trn, y_trn, cat_features=cat_in)\n    pool_val = Pool(X_val, y_val, cat_features=cat_in)\n\n    # a lighter/faster copy of your CB (same spirit, fewer iters to keep runtime sane)\n    cb_roll = CatBoostClassifier(\n        iterations=min(2000, max(800, int(cb.get_best_iteration()*0.8))) if cb.get_best_iteration() is not None else 1500,\n        learning_rate=cb.get_param('learning_rate') if cb.get_param('learning_rate') else 0.025,\n        depth=cb.get_param('depth') if cb.get_param('depth') else 8,\n        l2_leaf_reg=cb.get_param('l2_leaf_reg') if cb.get_param('l2_leaf_reg') else 2,\n        loss_function=\"Logloss\",\n        eval_metric=\"AUC\",\n        random_seed=42,\n        verbose=False,\n    )\n    cb_roll.fit(pool_trn, eval_set=pool_val, use_best_model=True)\n    preds_val = cb_roll.predict_proba(X_val)[:,1]\n\n    oof_rows.append(train_m.loc[val_idx, [\"cust_id\",\"month_key\",\"churn\"]].assign(pred=preds_val))\n    oof_preds.extend(preds_val)\n\noof_df = pd.concat(oof_rows, axis=0).reset_index(drop=True)\nprint(f\"‚úÖ OOF done: {oof_df.shape[0]} validation rows across months\")\n\n# --- global ISO on OOF (fallback)\niso_global = IsotonicRegression(out_of_bounds=\"clip\")\niso_global.fit(oof_df[\"pred\"].values, oof_df[\"churn\"].values)\n\n# --- fit ISO per month using that month's OOF preds\niso_by_month = {}\nfor m, grp in oof_df.groupby(\"month_key\"):\n    if grp[\"churn\"].nunique() < 2 or grp.shape[0] < 100:\n        # not enough signal ‚Üí skip (will fallback to neighbor/global)\n        continue\n    iso_m = IsotonicRegression(out_of_bounds=\"clip\")\n    iso_m.fit(grp[\"pred\"].values, grp[\"churn\"].values)\n    iso_by_month[m] = iso_m\n\nprint(f\"üì¶ Built {len(iso_by_month)} month-specific ISO models \"\n      f\"(of {len(unique_months)-1} OOF months)\")\n\n# --- small utility: pick the best ISO for a given month (closest past month, else global)\ndef pick_iso_for_month(month_key):\n    if month_key in iso_by_month:\n        return iso_by_month[month_key]\n    # choose the most recent past month that has ISO\n    past_months = [m for m in iso_by_month.keys() if m <= month_key]\n    if past_months:\n        return iso_by_month[max(past_months)]\n    # otherwise the earliest available ISO, or global\n    future_months = [m for m in iso_by_month.keys() if m > month_key]\n    if future_months:\n        return iso_by_month[min(future_months)]\n    return iso_global\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T16:34:08.521897Z","iopub.execute_input":"2025-10-22T16:34:08.522244Z","iopub.status.idle":"2025-10-22T17:09:59.836851Z","shell.execute_reply.started":"2025-10-22T16:34:08.522213Z","shell.execute_reply":"2025-10-22T17:09:59.833830Z"}},"outputs":[{"name":"stdout","text":"üß™ Rolling OOF across 18 months...\n‚úÖ OOF done: 125834 validation rows across months\nüì¶ Built 17 month-specific ISO models (of 17 OOF months)\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"# ===============================================================\n# üß† Final model (full-train) + temporal ISO applied to VALID & TEST\n# ===============================================================\nfull_X = train_m[FEATS]\nfull_y = train_m[\"churn\"]\ncat_in_full = [c for c in ALL_CAT if c in full_X.columns]\npool_full = Pool(full_X, full_y, cat_features=cat_in_full)\n\ncb_final = CatBoostClassifier(\n    iterations=int(cb.get_best_iteration()*1.2) if cb.get_best_iteration() is not None else 3000,\n    learning_rate=0.03,\n    depth=cb.get_param('depth') if cb.get_param('depth') else 8,\n    l2_leaf_reg=cb.get_param('l2_leaf_reg') if cb.get_param('l2_leaf_reg') else 3,\n    random_seed=42,\n    loss_function=\"Logloss\",\n    eval_metric=\"AUC\",\n    verbose=False\n)\nprint(\"üöÄ Training final CatBoost on full data...\")\ncb_final.fit(pool_full)\n\n# --- VALID (to see effect of month-wise ISO)\nvalid_part_m = add_month_key(valid_part, \"ref_date\")\nXv = valid_part_m[FEATS]\npv = cb_final.predict_proba(Xv)[:,1]\npv_cal = np.empty_like(pv)\n\nfor idx, m in enumerate(valid_part_m[\"month_key\"].values):\n    iso_m = pick_iso_for_month(m)\n    pv_cal[idx] = iso_m.predict([pv[idx]])[0]\n\nprint(\"üìà Validation with temporal ISO\")\nprint(f\"AUC  raw : {roc_auc_score(valid_part_m['churn'], pv):.5f}\")\nprint(f\"AUC  cal : {roc_auc_score(valid_part_m['churn'], pv_cal):.5f}\")\nprint(f\"LogLoss raw: {log_loss(valid_part_m['churn'], pv):.5f}\")\nprint(f\"LogLoss cal: {log_loss(valid_part_m['churn'], pv_cal):.5f}\")\nprint(f\"Brier raw : {brier_score_loss(valid_part_m['churn'], pv):.5f}\")\nprint(f\"Brier cal : {brier_score_loss(valid_part_m['churn'], pv_cal):.5f}\")\n\n# --- TEST\nXt = test_m[FEATS]\npt = cb_final.predict_proba(Xt)[:,1]\npt_cal = np.empty_like(pt)\n\nfor idx, m in enumerate(test_m[\"month_key\"].values):\n    iso_m = pick_iso_for_month(m)\n    pt_cal[idx] = iso_m.predict([pt[idx]])[0]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T17:11:42.153805Z","iopub.execute_input":"2025-10-22T17:11:42.154214Z","iopub.status.idle":"2025-10-22T17:13:05.704984Z","shell.execute_reply.started":"2025-10-22T17:11:42.154190Z","shell.execute_reply":"2025-10-22T17:13:05.703376Z"}},"outputs":[{"name":"stdout","text":"üöÄ Training final CatBoost on full data...\nüìà Validation with temporal ISO\nAUC  raw : 0.75529\nAUC  cal : 0.75285\nLogLoss raw: 0.34530\nLogLoss cal: 0.34290\nBrier raw : 0.10436\nBrier cal : 0.10382\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# --- save both\npd.DataFrame({\"cust_id\": test[\"cust_id\"], \"churn\": pt}).to_csv(\n    \"submission_catboost_uncalibrated.csv\", index=False)\npd.DataFrame({\"cust_id\": test[\"cust_id\"], \"churn\": pt_cal}).to_csv(\n    \"submission_catboost_temporal_iso.csv\", index=False)\n\nprint(\"üíæ Saved: submission_catboost_temporal_iso.csv (recommended)\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T17:13:39.523662Z","iopub.execute_input":"2025-10-22T17:13:39.524032Z","iopub.status.idle":"2025-10-22T17:13:39.754696Z","shell.execute_reply.started":"2025-10-22T17:13:39.524008Z","shell.execute_reply":"2025-10-22T17:13:39.753242Z"}},"outputs":[{"name":"stdout","text":"üíæ Saved: submission_catboost_temporal_iso.csv (recommended)\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"# ===============================================================\n# üìä Final Local Summary\n# ===============================================================\nsummary = pd.DataFrame({\n    \"Metric\": [\"AUC\", \"LogLoss\", \"BrierScore\"],\n    \"Before ISO\": [\n        roc_auc_score(y_valid, cb_val),\n        log_loss(y_valid, cb_val),\n        brier_score_loss(y_valid, cb_val)\n    ],\n    \"After ISO\": [\n        roc_auc_score(y_valid, cb_val_cal),\n        log_loss(y_valid, cb_val_cal),\n        brier_score_loss(y_valid, cb_val_cal)\n    ]\n})\nprint(\"\\nüìä Local Validation Summary\")\nprint(summary)\n\nsummary.plot(\n    x=\"Metric\", y=[\"Before ISO\", \"After ISO\"],\n    kind=\"bar\", figsize=(7,4), title=\"Calibration Impact (CatBoost)\"\n)\nplt.grid(axis=\"y\", linestyle=\"--\", alpha=0.5)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T17:13:45.252200Z","iopub.execute_input":"2025-10-22T17:13:45.252572Z","iopub.status.idle":"2025-10-22T17:13:45.528277Z","shell.execute_reply.started":"2025-10-22T17:13:45.252546Z","shell.execute_reply":"2025-10-22T17:13:45.527091Z"}},"outputs":[{"name":"stdout","text":"\nüìä Local Validation Summary\n       Metric  Before ISO  After ISO\n0         AUC    0.711063   0.713953\n1     LogLoss    0.605442   0.354593\n2  BrierScore    0.212801   0.107013\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 700x400 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"\nüìä Local Validation Summary\n       Metric  Before ISO  After ISO\n0         AUC    0.711063   0.713953\n1     LogLoss    0.605442   0.354593\n2  BrierScore    0.212801   0.107013\n\n\nüöÄ Training final CatBoost on full data...\nüìà Validation with temporal ISO\nAUC  raw : 0.75529\nAUC  cal : 0.75285\nLogLoss raw: 0.34530\nLogLoss cal: 0.34290\nBrier raw : 0.10436\nBrier cal : 0.10382\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}